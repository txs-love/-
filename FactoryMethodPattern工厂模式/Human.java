package example.Design.FactoryMethodPattern工厂模式;

/**
 * @author txssherry@gmail.com
 * @date 2023/3/25 12:54
 */
public interface Human {
//首先定义什么是人类

        //人是愉快的，会笑的，本来是想用smile表示，想了一下laugh更合适，好长时间没有大笑了；
        public void laugh();

        //人类还会哭，代表痛苦
        public void cry();

        //人类会说话
        public void talk();

    }
/**
 * 工厂模式就是简化了对象的构建。正常情况下我们在Java中是通过new来构建对象，但是有的对象可能需要设置一些默认值等等的额外操作。
 * 这个时候为了简化用户的操作我们引入了工厂模式的设计思想。工厂模式就是将构建对象的过程封装在工厂类中，我们需要具体的工厂类中的对象我们就可以通过工厂来获取了。
 * 提高了使用的灵活性。

优点
 * 通过上面的描述我们能够轻松的发现工厂模式带来的好处。有了工厂模式我们构建对象不需要关注对象构建的过程，
 * 我们需要的对象只需要想工厂发出生产对象的指令就可以了。抛弃构建的复杂过程，增加代码的阅读性。

工厂模式又细分为三种：简单工厂模式+工厂方法模式+抽象工厂模式

 * 简单工厂模式:
 * 简单工厂模式是我们上面的情景再现的情况，简单工厂就是说所有的细节都是依靠一个工厂统一完成，这种模式下工厂的压力特别大。


 * 工厂方法模式:
 * 工厂方法模式在上面情景的基础上将工厂进行了更改优化，之前工厂是一个工厂生产一年四季的衣服，现在抽象一个工厂类，
 * 在有四个工厂是该抽象工厂的具体实现类，这四个工厂具体分别负责生产春夏秋冬衣服。这样仍然是工厂模式，只不过相对简单工厂模式已经减轻了工厂的压力了。

 * 抽象工厂模式:
 * 抽象工厂模式在抽象方法模式的基础上有进行了强化，抽象方法中是一个具体工厂的实现类负责生产一种类型的衣服，
 * 而在抽象工厂模式下一个具体的工厂的实现类可以生产多个类别的衣服。这样更加的减轻服装厂的压力了。

 */