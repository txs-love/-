基本介绍


(1)开闭原则(Open Closed Principle)是编程中最基础、最重要的设计原则

(2)一个软件实体如类，模块和函数应该对扩展开放(对提供功能的一方)，对修改关闭。用抽象构建框架,用实现扩展细节。

(3)当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。

(4)编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则。



改进的思路分析:
思路:把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可，
    这样我们有新的图形种类时，只需要让新的图形类继承Shape，
    并实现draw方法即可，使用方的代码就不需要修->满足了开闭原则


开闭原则（Open-Closed Principle）是指软件实体（模块、类、方法等）应该是可以扩展的，但是不可修改的，也就是说，在不修改原有代码的前提下，可以通过新增代码来扩展软件的功能。

开闭原则是面向对象设计中的一个基本原则，其目的是使软件系统更加稳定、灵活和易于扩展，便于长期维护。

这个原则有以下几个关键点：

对于已经实现的功能模块，我们应该尽量避免修改它们的代码，而是通过继承、重载、扩展等方式进行功能的扩展和改进。

对于需要扩展的功能，我们应该尽量编写“可插拔”式的代码，使得新功能可以在不修改原有代码的情况下，通过新增代码来实现。

在进行设计时，我们应该保持清晰的边界，尽可能地将不同的功能模块分离开来，避免相互依赖和影响。

应用开闭原则可以使软件系统具备更好的可复用性、可扩展性，并且更加适应变化，以应对未来的需求。