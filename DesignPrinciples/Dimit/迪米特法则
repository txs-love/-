迪米特法则

(1) 一个对象应该对其他对象保持最少的了解
(2) 类与类关系越密切，耦合度越大
(3) 迪米特法则(Demeter Principle)又叫最少知道原则，即一个类对自己依赖的类知道的越少越好。也就是说，对于
    被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部。对外除了提供的 public 方法，不对外泄露任何信息
(4) 迪米特法则还有个更简单的定义：只与直接的朋友通信
(5) 直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间
是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返
回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变
量的形式出现在类的内部。
(6)降低类当中的耦合度——>
class A(
  B b=new B();       //这个就是陌生类;
)



迪米特原则（Law of Demeter）又叫作最少知识原则（Least Knowledge Principle），是一种面向对象设计原则，提倡降低对象之间的耦合度，让对象之间的相互作用尽可能地简单。

该原则的基本思想是：一个对象应该对其他对象有最少的了解。具体地讲，一个对象对其他对象的了解应该仅限于那些与它直接相关的对象。也就是说，在设计软件系统时，我们应该尽量减少对象之间的直接依赖关系，使得设计的软件系统更加灵活和易于维护。

迪米特原则主要包括以下几个方面：

我们应该尽量避免在一个对象的方法中访问另一个对象的内部状态，而是通过对象的公共接口进行操作，减少对其他对象的了解。

我们应该尽量避免在一个对象的方法中调用另一个对象的方法，而是通过委托或回调等方式，将该对象的方法传递给其他对象进行调用。

我们应该尽量避免在一个对象的方法中创建另一个对象，而是通过工厂模式等方式，将对象的创建过程封装起来。

应用迪米特原则可以使软件系统的耦合度更低，使得单个对象的修改不会影响到其他对象，从而提高软件系统的可维护性和可复用性。